/**
本规则偏重成本优先
**/

package com.esquel.APS.GEW_FN.configuration;


import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;
import com.esquel.APS.GEW_FN.domain.Task;
import com.esquel.APS.GEW_FN.domain.MachinePlan;
import com.esquel.APS.GEW_FN.solver.interactor.NonproductionAssertionInteractor;
import com.esquel.APS.GEW_FN.solver.interactor.TaskMachinePlanAssertionInteractor;
import com.esquel.APS.GEW_FN.domain.enums.RuleDefinition;
import com.esquel.APS.GEW_FN.domain.enums.TaskMachinePlanBrokenType;
import com.esquel.APS.GEW_FN.domain.enums.TaskType_Location_In_Lot;
import com.esquel.APS.Helpers.Common;

//Score Holder for OptaPlanner
global HardMediumSoftLongScoreHolder scoreHolder;
dialect "java"
// ############################################################################
// Hard constraints
// ############################################################################


// 对比Task的要求及MachinePlan可提供的服务参数，只有全部符合，才能排进指定的MachinePlan
rule "MachinePlan Task Compare"
when
	Task($machinePlan : machinePlan != null, (!(usableMachinePlan contains $machinePlan)))
then
	//System.out.println("MachinePlan-Task-Compare:" + 100009 );
	scoreHolder.addHardConstraintMatch(kcontext, -100009L);
end

// 检查同一批的两个相邻任务的开始与结果时间是否存倒序的问题
rule "Task Sequence"
when
	$task : Task(planStartTimeL != null,
		planStartTimeL != 0L,
	 	previousTaskInSameLot != null, 
 		machinePlan != null,  
	 	previousTaskInSameLot.getPlanEndTimeL() > planStartTimeL)
then
//	System.out.println("Task Sequence:" + ($task.getPlanStartTimeL() - $task.getPreviousTaskInSameLot().getPlanEndTimeL()));
	scoreHolder.addHardConstraintMatch(kcontext, ($task.getPlanStartTimeL() - $task.getPreviousTaskInSameLot().getPlanEndTimeL()));
end

rule "Match arrival time"
when 
	$task : Task(planStartTimeL != null, planStartTimeL > 0L, arrivalTimeL != null, arrivalTimeL > 0L , planStartTimeL < arrivalTimeL)
then
//	System.out.println("Match arrival time:" + $task.getPlanStartTimeL() + "|" + $task.getArrivalTimeL());
	scoreHolder.addHardConstraintMatch(kcontext, $task.getPlanStartTimeL() - $task.getArrivalTimeL());
end


rule "Task-Overlap"
when
	Task(machinePlan != null, planStartTimeL != null, planStartTimeL > 0L, $score : timeOverlap() > 0)
then
//	System.out.println("Task-Overlap" + $score);
	scoreHolder.addHardConstraintMatch(kcontext, - $score);
end

